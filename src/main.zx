# src/main.zx - FINAL COMPLETE VERSION
use { JSONRPCServer, WebSocketRPCServer } from "./rpc/server.zx"
use { ContractRuntime } from "./runtime/contract_runtime.zx"
use { StateManager } from "./runtime/state_manager.zx"

entity ZiverNode:
    # ... (previous properties) ...
    rpc_server: JSONRPCServer
    ws_server: WebSocketRPCServer
    contract_runtime: ContractRuntime
    state_manager: StateManager
    
    action initialize():
        """
        Initialize complete blockchain node
        """
        print "🚀 Initializing Complete Ziver Node..."
        
        # Initialize core components
        let crypto = Crypto()
        self.node_wallet = crypto.generate_keypair()
        
        self.consensus = PoSConsensus()
        self.network = P2PNetwork()
        self.zvm = ZiverVirtualMachine()
        self.bridge_manager = CrossChainBridge()
        
        # Initialize new runtime components
        self.contract_runtime = ContractRuntime()
        self.state_manager = StateManager()
        
        # Create genesis block
        if self.blockchain.is_empty():
            let genesis = create_genesis_block()
            self.blockchain.add(genesis)
            self.state_manager.apply_block(genesis)
        
        # Register as validator
        self.consensus.register_validator(self.node_wallet.address, 1000)
        
        # Initialize RPC servers
        self.rpc_server = JSONRPCServer(self, 8545)
        self.ws_server = WebSocketRPCServer(self.rpc_server, 8546)
        
        print "✅ Complete node initialized with RPC, Runtime, and State management"

    action start_full_node(port: integer = 3030):
        """
        Start complete blockchain node with all services
        """
        print "🎯 Starting Full Ziver Node..."
        
        # Start networking
        self.network.start_node(port)
        self.network.discover_peers()
        
        # Start RPC services
        self.rpc_server.start()
        self.ws_server.start()
        
        # Start consensus
        self.start_consensus()
        
        print "🎉 Ziver Full Node running!"
        print "   Network: localhost:" + string(port)
        print "   JSON-RPC: http://localhost:8545"
        print "   WebSocket: ws://localhost:8546"
        print "   Node ID: " + self.node_wallet.address

    action mine_block():
        """
        Enhanced block mining with state management
        """
        if self.pending_transactions.is_empty():
            return
        
        let previous_block = self.blockchain[self.blockchain.count() - 1]
        
        # Validate and process transactions
        let valid_transactions = []
        for each tx in self.pending_transactions:
            if self.consensus.validate_transaction(tx):
                valid_transactions.add(tx)
        
        if valid_transactions.is_empty():
            return
        
        # Create new block
        let new_block = create_block(
            previous_block: previous_block,
            transactions: valid_transactions,
            validator: self.node_wallet.address,
            private_key: self.node_wallet.private_key
        )
        
        # Add block reward
        let reward_txs = self.consensus.process_block_reward(self.node_wallet.address, new_block)
        new_block.transactions = reward_txs + valid_transactions
        
        # Apply block to state
        if self.state_manager.apply_block(new_block):
            self.blockchain.add(new_block)
            self.network.broadcast_block(new_block)
            self.ws_server.broadcast_new_block(new_block)
            self.pending_transactions = []
            
            print "✅ Block mined: #" + string(new_block.index)

# 🚀 START THE COMPLETE BLOCKCHAIN
print "🏁 Starting Complete Ziver Blockchain..."
let full_node = ZiverNode()
full_node.initialize()
full_node.start_full_node(3030)

print "🎯 Blockchain Status:"
print "   RPC: ✅ JSON-RPC API ready"
print "   WebSocket: ✅ Real-time updates ready" 
print "   Runtime: ✅ Smart contract execution ready"
print "   State: ✅ Advanced state management ready"
print "   Network: ✅ P2P networking ready"
print "   Consensus: ✅ PoS consensus ready"
print "   Wallet: ✅ Multi-chain wallet ready"
print "   Bridge: ✅ Cross-chain bridge ready"    
    action deploy_token(name: text, symbol: text, supply: integer, owner: Address) -> Address:
        """
        Deploy a new ZRC-20 token
        """
        let token = ZRC20Token(name, symbol, supply, owner)
        let token_address = "TOKEN_" + crypto.hash_data(name + symbol + string(DateTime.now().timestamp())).slice(0, 40)
        
        self.token_registry[token_address] = token
        print "🪙 Token deployed: " + name + " (" + symbol + ") at " + token_address
        
        return token_address
    
    action bridge_assets(wallet_address: Address, source_chain: text, target_chain: text, amount: integer, token_address: text?) -> boolean:
        """
        Bridge assets using the bridge manager
        """
        if not self.wallet_contracts.has(wallet_address):
            print "❌ Wallet not found"
            return false
        
        let wallet = self.wallet_contracts[wallet_address]
        
        # Use wallet's bridge function
        return wallet.bridge_assets(source_chain, target_chain, amount, token_address)
    
    action get_wallet_info(wallet_address: Address) -> Map<text, any>:
        """
        Get comprehensive wallet information
        """
        if not self.wallet_contracts.has(wallet_address):
            return {"error": "Wallet not found"}
        
        let wallet = self.wallet_contracts[wallet_address]
        let portfolio = wallet.get_total_portfolio_value()
        
        return {
            "owner": wallet.owner,
            "portfolio": portfolio,
            "supported_chains": wallet.supported_chains,
            "guardians": wallet.guardians.count()
        }

# Enhanced node startup
print "🏁 Starting Enhanced Ziver Blockchain..."
let node = ZiverNode()
node.initialize()

# Test wallet creation
let user_wallet = node.create_wallet("ZIV_user_789")
let token_address = node.deploy_token("Ziver Gold", "ZGLD", 1000000, "ZIV_owner_123")

# Test wallet operations
let wallet_info = node.get_wallet_info(user_wallet)
print "📊 Wallet Info: " + string(wallet_info)

print "🎉 Phase 1B Complete! Multi-chain wallet system ready."
