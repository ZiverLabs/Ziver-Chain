# src/network/p2p.zx (UPDATED - Integrated with your code)
entity P2PNetwork:
    peers: List<text>  # List of peer addresses
    node_id: text
    port: integer?
    is_listening: boolean = false

    action start_node(port: integer):
        """
        Start the P2P node (your existing code)
        """
        self.port = port
        self.is_listening = true
        
        print "🔄 Starting P2P node on port " + string(port)
        print "Node ID: " + self.node_id
        print "📡 Listening for peers..."
        
        # Start background listener
        self.start_message_processor()

    action connect_to_peer(address: text):
        """
        Connect to a peer (your existing code)
        """
        print "🔗 Connecting to peer: " + address
        self.peers = push(self.peers, address)
        print "✅ Connected to " + string(self.peers.count()) + " peers"

    action broadcast_block(block: Block):
        """
        Broadcast block to all peers (your existing code)
        """
        print "📢 Broadcasting block " + string(block.index) + " to " + string(self.peers.count()) + " peers"
        for each peer in self.peers:
            print "  → Sending to: " + peer
            self.send_block_to_peer(peer, block)

    action broadcast_transaction(tx: Transaction):
        """
        Broadcast transaction to all peers
        """
        print "📢 Broadcasting transaction to " + string(self.peers.count()) + " peers"
        for each peer in self.peers:
            self.send_transaction_to_peer(peer, tx)

    # Enhanced methods
    action send_block_to_peer(peer: text, block: Block):
        """
        Send block to specific peer
        """
        # Implementation would use actual network calls
        print "  📦 Sending block #" + string(block.index) + " to " + peer

    action send_transaction_to_peer(peer: text, tx: Transaction):
        """
        Send transaction to specific peer
        """
        print "  💸 Sending transaction to " + peer

    action start_message_processor():
        """
        Background process to handle incoming messages
        """
        print "🔄 Starting message processor..."
        # This would run in background and process incoming network messages

    action discover_peers():
        """
        Discover peers on the network
        """
        print "🔍 Discovering peers..."
        # Would use peer discovery protocol
        
        # For now, connect to some bootstrap nodes
        let bootstrap_nodes = [
            "127.0.0.1:3031",
            "127.0.0.1:3032", 
            "127.0.0.1:3033"
        ]
        
        for each node in bootstrap_nodes:
            self.connect_to_peer(node)

# Test the enhanced network
print "🌐 Testing Enhanced Network..."
let network = P2PNetwork(node_id: "node_001")
network.start_node(8545)
network.discover_peers()

# Test broadcasting
let test_block = createBlock(1, "Test Block", "0")
network.broadcast_block(test_block)